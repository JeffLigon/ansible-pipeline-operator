# code: language=ansible

# Set of tasks for creating a Trilio for Kubernetes Backup where auth is password
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Execute Backup Tasks
  tags: ['backup', 'backupplan', 'smoketest', 'autoprotect']
  block:
    - name: Configure the backup using "{{ trilio_kubernetes_backup_name }}"
      ansible.builtin.template:
        src: templates/backup.yaml.j2
        dest: "/tmp/{{ trilio_kubernetes_backup_name }}-{{ item }}-backup.yaml"
        mode: "0600"
      loop: "{{ namespaces_batch }}"

    - name: Execute the backup of "{{ trilio_kubernetes_backupplan_name }}"
      kubernetes.core.k8s:
        api_key: "{{ trilio_kubernetes_auth_results.openshift_auth.api_key }}"
        host: "{{ trilio_kubernetes_host }}"
        kind: Backup
        state: present
        namespace: "{{ item }}"
        src: "/tmp/{{ trilio_kubernetes_backup_name }}-{{ item }}-backup.yaml"
        validate_certs: false
      register: trilio_kubernetes_backup
      loop: "{{ namespaces_batch }}"

    - name: Get backup from namespaces "{{ namespace }}"
      kubernetes.core.k8s_info:
        api_key: "{{ trilio_kubernetes_auth_results.openshift_auth.api_key }}"
        host: "{{ trilio_kubernetes_host }}"
        api_version: "triliovault.trilio.io/v1"
        kind: Backup
        namespace: "{{ item }}"
        name: "{{ trilio_kubernetes_backup_name }}-{{ item }}-{{ trilio_kubernetes_uniq_id }}"
        validate_certs: false
      register: backups
      retries: 20
      delay: 60
      until: backups.resources is defined and
        backups.resources | length > 0 and
        backups.resources[0].status.status == 'Available'
      loop: "{{ namespaces_batch }}"

    - name: Build the backup metadata to location dictionary
      set_fact:
        backup_metadata_to_location: "{{ backup_metadata_to_location | combine({ item.resources[0].metadata.name: item.resources[0].status.location }) }}"
      loop: "{{ backups.results }}"
      when: item.resources | length > 0
